// Generated by gencpp from file ORB_VIO/viorb_msg.msg
// DO NOT EDIT!


#ifndef ORB_VIO_MESSAGE_VIORB_MSG_H
#define ORB_VIO_MESSAGE_VIORB_MSG_H


#include <string>
#include <vector>
#include <map>
#include <ostream>
#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>
#include "ros/time.h"
#include "ros/macros.h"

#include "ros/assert.h"
#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8.h>

namespace ORB_VIO
{
template <class ContainerAllocator>
struct viorb_msg_
{
  typedef viorb_msg_<ContainerAllocator> Type;

  viorb_msg_()
    : header()
    , Tic()
    , Qwi()
    , gw()
    , VINSInitFlag()
    , TrackStatus()
    , GetNumTrack()  {
    }
  viorb_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Tic(_alloc)
    , Qwi(_alloc)
    , gw(_alloc)
    , VINSInitFlag(_alloc)
    , TrackStatus(_alloc)
    , GetNumTrack(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _Tic_type;
  _Tic_type Tic;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _Qwi_type;
  _Qwi_type Qwi;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gw_type;
  _gw_type gw;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _VINSInitFlag_type;
  _VINSInitFlag_type VINSInitFlag;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _TrackStatus_type;
  _TrackStatus_type TrackStatus;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _GetNumTrack_type;
  _GetNumTrack_type GetNumTrack;





  typedef boost::shared_ptr< ::ORB_VIO::viorb_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_VIO::viorb_msg_<ContainerAllocator> const> ConstPtr;

}; // struct viorb_msg_

typedef ::ORB_VIO::viorb_msg_<std::allocator<void> > viorb_msg;

typedef boost::shared_ptr< ::ORB_VIO::viorb_msg > viorb_msgPtr;
typedef boost::shared_ptr< ::ORB_VIO::viorb_msg const> viorb_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ORB_VIO::viorb_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ORB_VIO::viorb_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ORB_VIO

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ORB_VIO': ['/home/te6000-16/catkin_ws/src/ORB_VIO/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ORB_VIO::viorb_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ORB_VIO::viorb_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ORB_VIO::viorb_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c600249c91f12baddc7494a15eca90c";
  }

  static const char* value(const ::ORB_VIO::viorb_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c600249c91f12baULL;
  static const uint64_t static_value2 = 0xddc7494a15eca90cULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ORB_VIO/viorb_msg";
  }

  static const char* value(const ::ORB_VIO::viorb_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
geometry_msgs/Pose Tic\n\
geometry_msgs/Quaternion Qwi\n\
geometry_msgs/Point gw\n\
std_msgs/Bool VINSInitFlag\n\
std_msgs/Int8 TrackStatus\n\
std_msgs/Int8 GetNumTrack\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
================================================================================\n\
MSG: std_msgs/Int8\n\
int8 data\n\
";
  }

  static const char* value(const ::ORB_VIO::viorb_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Tic);
      stream.next(m.Qwi);
      stream.next(m.gw);
      stream.next(m.VINSInitFlag);
      stream.next(m.TrackStatus);
      stream.next(m.GetNumTrack);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct viorb_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_VIO::viorb_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ORB_VIO::viorb_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Tic: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.Tic);
    s << indent << "Qwi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.Qwi);
    s << indent << "gw: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gw);
    s << indent << "VINSInitFlag: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.VINSInitFlag);
    s << indent << "TrackStatus: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.TrackStatus);
    s << indent << "GetNumTrack: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.GetNumTrack);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORB_VIO_MESSAGE_VIORB_MSG_H
